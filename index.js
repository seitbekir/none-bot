const VK = require('node-vk-bot-api');
const fs = require('fs');
const path = require('path');
const MarkovChain = require('markovchain');
const _ = require('lodash');

const bot = new VK({ token: process.env.TOKEN });

if (!process.env.NICE_WORDS || !process.env.CLIENTS) {
    throw new Error('env vars are required');
}

const librarySource = path.resolve(process.env.LIBRARY);
const adminId = process.env.ADMIN;

const library = new MarkovChain(fs.readFileSync(librarySource, 'utf8'), cleanWords);

const commands = {
    hello: ['–ø—Ä–∏–≤–µ—Ç','–ø—Ä–∏–≤–µ—Ç!', '–ø—Ä–∏–≤', 'ghbdtn'],
    say: ['–≥–æ–≤–æ—Ä–∏', 'ujdjhb'],
    love: ['–ª—é–±–∏'],
    stop: ['–ø–µ—Ä–µ—Å—Ç–∞–Ω—å'],
    fooo: ['—Ö—É–π–Ω—è', '–∑–∞–µ–±–∞–ª'],
    keywords: ['/–∫–æ–º–∞–Ω–¥—ã'],

    // admin
    admin: {
        niceSet: '/nice-set',
        niceUnset: '/nice-unset',
        niceAll: '/nice-all',
    }
};

const {
    getNiceWord,
    setNiceWord,
    unsetNiceWord,
    getClients,
    setClient,
    unsetClient,
} = require('./lib.js');

bot.hears(commands.hello, (ctx) => {
    ctx.sendMessage(ctx.user_id, '–ü—Ä–∏–≤–µ—Ç, –Ω—è—à!\n–Ø –º–æ–≥—É –≥–æ–≤–æ—Ä–∏—Ç—å —Å —Ç–æ–±–æ–π, –∞ –µ—â–µ —è –∑–Ω–∞—é —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã: "–ø—Ä–∏–≤–µ—Ç", "–≥–æ–≤–æ—Ä–∏", "–ª—é–±–∏" –∏ "–ø–µ—Ä–µ—Å—Ç–∞–Ω—å"');
});

bot.hears(commands.say, (ctx) => {
    ctx.sendMessage(ctx.user_id, getNiceWord());
});

bot.hears(commands.love, (ctx) => {
    if (setClient(ctx.user_id)) {
        ctx.sendMessage(ctx.user_id, '–ö–∞–∂–¥—ã–π —á–∞—Å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Ñ—Ä–∞–∑—É ‚ù§‚ò∫');
    } else {
        ctx.sendMessage(ctx.user_id, '–Ø —É–∂–µ —Ç–µ–±—è –ª—é–±–ª—é ‚ù§üíã');
    }
});
bot.hears(commands.stop, (ctx) => {
    if (unsetClient(ctx.user_id)) {
        ctx.sendMessage(ctx.user_id, '–õ–∞–¥–Ω–æ, –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Ñ—Ä–∞–∑ üòî');
    } else {
        ctx.sendMessage(ctx.user_id, '–Ø –∏ –Ω–µ –Ω–∞—á–∏–Ω–∞–ª ‚ò∫');
    }
});
bot.hears(commands.keywords, (ctx) => {
    ctx.reply('–Ø –∑–Ω–∞—é —Ç–æ–ª—å–∫–æ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã: "–ø—Ä–∏–≤–µ—Ç", "–≥–æ–≤–æ—Ä–∏", "–ª—é–±–∏" –∏ "–ø–µ—Ä–µ—Å—Ç–∞–Ω—å". –ù–æ —Ç—ã –º–æ–∂–µ—à—å –≥–æ–≤–æ—Ä–∏—Ç—å –º–Ω–µ –º–Ω–æ–≥–æ –¥—Ä—É–≥–∏—Ö –≤–µ—â–µ–π, —è –ø–æ–ø—ã—Ç–∞—é—Å—å –ø–æ–æ–±—â–∞—Ç—å—Å—è –≤ —Ç–æ–±–æ–π.');
});

bot.hears(commands.admin.niceSet, (ctx) => {
    if (!admin(ctx)) {
        return;
    }
    let word = ctx.body.slice(commands.admin.niceSet.length).trim().split('\n').join('\\n');

    if (setNiceWord(word)) {
        ctx.reply('Ok');
    } else {
        ctx.reply('Exists:\n' + word);
    }
});
bot.hears(commands.admin.niceUnset, (ctx) => {
    if (!admin(ctx)) {
        return;
    }
    let word = ctx.body.slice(commands.admin.niceUnset.length).trim().split('\n').join('\\n');

    if (unsetNiceWord(word)) {
        ctx.reply('Ok');
    } else {
        ctx.reply('Not Exists:\n' + word);
    }
});

const strangeStart = ['–±—ã'];
const strangeEnd = ['—á—Ç–æ', '–∫–∞–∫', '-', '–∏', '—É', '–∞', '–≤', '—Å', '–æ', '–Ω–∞', '–∏–∑'];
bot.on((ctx) => {
    let words = ctx.body.split(' ').map(cleanWords).filter(e => !!e.length && strangeStart.indexOf(e) === -1);

    let quote = library
        .start((list) => {
            let l = Object.keys(list);
            while (words.length > 0) {
                let word = _.pullAt(words, randomInteger(0, words.length - 1))[0];
                if (l.indexOf(word) > -1) {
                    return word;
                }
            }
            return _.sample(l);
        })
        .end(randomInteger(5, 10))
        .process();

    // clean from strange endings
    quote = quote.split(' ');
    while (true) {
        if (strangeEnd.indexOf(_.last(quote)) > -1) {
            _.pullAt(quote, quote.length - 1);
            continue;
        }
        break;
    }

    ctx.reply(_.upperFirst(quote.join(' ')));
});

bot.listen();

/**
 * each hour it sends one message to exeryone, who subscribed.
 */
setInterval(() => {
    let niceWord = getNiceWord();
    let clients = getClients();

    clients.forEach(client => {
        bot.reply(client, niceWord);
    });
}, 60 * 60 * 1000);
// }, 30 * 1000)

/* Private */
function admin(ctx) {
    if (ctx.user_id.toString() === adminId.toString()) {
        return true;
    }
    ctx.sendMessage(ctx.user_id, '–≠—Ç–æ –Ω–µ –¥–ª—è –≤–∞—Å –Ω–∞–ø–∏—Å–∞–Ω–æ ‚ò∫');
    return false;
}

/**
 * Random integer random
 * 
 * @private
 * @param {Number} min 
 * @param {Number} max 
 * @return {Number} random integer number
 */
function randomInteger(min, max) {
    let rand = min + Math.random() * (max + 1 - min);
    rand = Math.floor(rand);
    return rand;
}

function cleanWords(input) {
    input = input.replace(/[^0-9A-z–ê-—è\-]/gi, '');

    return _.lowerCase(input);
}